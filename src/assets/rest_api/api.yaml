openapi: "3.0.0"
info:
  title: AirAlert REST API
  version: "1.0"

# Security implementation
security:
  - cognito_auth: [ ]

components:

  # Security: Cognito (token inside HEADER)
  securitySchemes:
    cognito_auth:
      description: "The authorization manager for secure access"
      type: apiKey
      name: "Authorization"
      in: header
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:

          # IMPORTANT: UPDATE this "pool ARN key" if necessary
          - arn:aws:cognito-idp:eu-central-1:537108026853:userpool/eu-central-1_t07S3boLv

  # Schemas and Definitions
  schemas:

    # TYPE ControllerID
    TControllerID:
      description: "Unique controller identification value"
      type: string


    # TYPE ControllerSettings
    TControllerSettings:
      description: "Properties for configuring a controller"
      type: object
      required:
        - id
        - interval
      properties:

        # ATTR id: ControllerID
        id:
          $ref: "#/components/schemas/TControllerID"

        # ATTR interval: Number
        interval:
          description: "Time between two measuring cycles (s)"
          type: number
          minimum: 10
          default: 10


    # TYPE ControllerSet
    TControllerSet:
      description: "Set of controller identifications"
      type: array
      uniqueItems: true
      items:

        # VALUES: ControllerID
        $ref: "#/components/schemas/TControllerID"


    # TYPE MeasurementData
    TMeasurementData:
      description: "Object storing measurement data entries"
      type: object
      properties:

        # ATTR pm2.5: Number
        pm2.5:
          description: "Amount of PM2.5 particles in the air (µg/m^3)"
          type: number
        # ATTR pm10: Number
        pm10:
          description: "Amount of PM10 particles in the air (µg/m^3)"
          type: number
        # ATTR co2: Number
        co2:
          description: "Amount of co2 molecules in the air (ppm)"
          type: number
        # ATTR temperature: Number
        temperature:
          description: "Surrounding temperature (°C)"
          type: number
        # ATTR humidity: Number
        humidity:
          description: "Relative humidity (%rH)"
          type: number


    # TYPE MeasurementDataSpecific
    TMeasurementDataSpecific:
      description: "Object storing measurement data entries for a specific controller"
      type: object
      properties:

        # ATTR timestamp: DateTime
        timestamp:
          description: "Time when the entry was initially created"
          type: string
          format: date-time

        # ATTR id: ControllerID
        id:
          $ref: "#/components/schemas/TControllerID"

        # ATTR data: MeasurementData
        data:
          $ref: "#/components/schemas/TMeasurementData"


paths:
  # MODULE controller
  /controller:

    # GET controller: all controller ids
    get:
      summary: "Get the IDs of all registered controllers"

      # NO Parameters
      # NO Request body

      # Results
      responses:

        # RESULT Success
        '201':
          description: "SUCCESS"
          content:
            application/json:
              schema:

                # IS ControllerSet
                $ref: "#/components/schemas/TControllerSet"


    # POST controller: create a new controller
    post:
      summary: "Add a new controller as a thing"

      # NO Parameters

      # Request body
      requestBody:
        description: "New controller settings"
        required: true
        content:
          application/json:
            schema:

              # IS ControllerSettings
              $ref: "#/components/schemas/TControllerSettings"

      # Results
      responses:

        # RESULT Success
        '201':
          description: "SUCCESS"

        # RESULT Error_Already
        '409':
          description: "ERROR: ID already registered"


  # MODULE controller/{id}
  /controller/{id}:

    # GET controller/{id}: Get a controller's settings
    get:
      summary: "Get the settings of a controller"

      # Parameters
      parameters:

        # PATH-PARAM id
        - name: id
          in: path
          description: "The controller's ID"
          required: true
          schema:

            # IS TControllerID
            $ref: "#/components/schemas/TControllerID"

      # NO Request body

      # Results
      responses:

        # RESULT Success
        '201':
          description: "SUCCESS: Getting the controller settings"
          content:
            application/json:
              schema:

                # IS TControllerSettings
                $ref: "#/components/schemas/TControllerSettings"

        # RESULT Error_NotFound
        '404':
          description: "ERROR: ID not found"


    # PUT controller/{id}: Modify a controller's settings
    put:
      summary: "Modify the settings of a controller"

      # Parameters
      parameters:

        # PATH-PARAM id
        - name: id
          in: path
          description: "The controller's ID"
          required: true
          schema:

            # IS TControllerID
            $ref: "#/components/schemas/TControllerID"

      # Request body
      requestBody:
        description: "New controller settings"
        required: true
        content:
          application/json:
            schema:

              # IS ControllerSettings
              $ref: "#/components/schemas/TControllerSettings"

      # Results
      responses:

        # RESULT Success
        '201':
          description: "SUCCESS"

        # RESULT Error_NotFound
        '404':
          description: "ERROR: ID not found"


    # DELETE controller: remove a controller
    delete:
      summary: "Remove a controller (got by ID)"

      # Parameters
      parameters:

        # PATH-PARAM id
        - name: id
          in: path
          description: "The controller's ID"
          required: true
          schema:

            # IS TControllerID
            $ref: "#/components/schemas/TControllerID"

      # NO Request body

      # Results
      responses:

        # RESULT Success
        '201':
          description: "SUCCESS: Getting the controller settings"

          # RESULT Error_NotFound
        '404':
          description: "ERROR: ID not found"


  # MODULE data/history
  /data/history:

    # GET data/history: Get filtered data entries over a time
    get:
      description: "Get saved measurement data entries"

      # Parameters
      parameters:

        # QUERY-PARAM count
        - name: count
          in: query
          description: "Count LATEST elements to get"
          required: true
          schema:

            # IS Integer
            type: integer
            minimum: 1
            default: 1

        # QUERY-PARAM ids
        - name: ids
          in: query
          description: "Controller ids"
          required: true
          schema:

            # IS ControllerSet
            $ref: "#/components/schemas/TControllerSet"

      # NO Request body

      # Results
      responses:

        # RESULT Success
        '201':
          description: "SUCCESS: Getting the data"
          content:
            application/json:
              schema:

                # IS MeasurementDataSpecific ARRAY
                type: array
                description: Array of measured data entries
                items:
                  $ref: "#/components/schemas/TMeasurementDataSpecific"


  # MODULE data/ref_value
  /data/ref_value:

    # GET data/ref_value: Get reference data entries
    get:
      description: "Get standard/reference data entries"

      # NO Parameters
      # NO Request body

      # Results
      responses:

        # RESULT Success
        '201':
          description: "SUCCESS: Getting the data"
          content:
            application/json:
              schema:

                # IS MeasurementData ARRAY
                type: array
                description: Array of measured data entries
                items:
                  $ref: "#/components/schemas/TMeasurementData"